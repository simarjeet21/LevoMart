spring.application.name=payment
server.port=8081
logging.level.org.springframework.security=DEBUG
spring.docker.compose.enabled=false

# PostgreSQL  Database Configuration
#spring.datasource.url=jdbc:postgresql://host.docker.internal:5432/mydb

spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
server.servlet.session.cookie.same-site=strict
spring.security.user.name=
spring.security.user.password=


# Stripe
stripe.secret-key=${STRIPE_SECRET_KEY}
stripe.webhook-secret=${WEBHOOK_SECRET_KEY}
CHECKOUT_SUCCESS_URL=${CHECKOUT_SUCCESS_URL}
CHECKOUT_CANCEL_URL=${CHECKOUT_CANCEL_URL}
jwt.secret=${JWT_KEY}

# Kafka
spring.kafka.bootstrap-servers=${KAFKA_BROKERS}
kafka.paymentSucceeded.topic=payment-succeeded
kafka.paymentSucceeded.schema=/app/shared-schemas/payment/payment-succeeded.schema.json
kafka.paymentFailed.topic=payment-failed
kafka.paymentFailed.schema=/app/shared-schemas/payment/payment-succeeded.schema.json
kafka.orderCreated.schema=/app/shared-schemas/order/order-created.schema.json

spring.kafka.consumer.group-id: payment-service-group
spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer: org.apache.kafka.common.serialization.StringDeserializer






